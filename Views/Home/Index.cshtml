@model List<Todo>
@{
    ViewData["Title"] = "Görevler";
}

<div class="container py-4">
    <div class="row mb-4">
        <div class="col">
            <h2 class="text-primary fw-bold"><i class="bi bi-list-check"></i> Görevlerim</h2>
        </div>
        <div class="col text-end">
            <button class="btn btn-primary rounded-pill shadow-sm" onclick="showAddTodoModal()">
                <i class="bi bi-plus-lg"></i> Yeni Görev
            </button>
        </div>
    </div>

    <div id="todoList" class="list-group shadow-sm">
        @foreach (var todo in Model ?? new List<Todo>())
        {
            <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center py-3 border-start border-4 @(todo.IsCompleted ? "border-success" : "border-primary")">
                <span class="ms-2 @(todo.IsCompleted ? "text-decoration-line-through text-muted" : "")">
                    @todo.Title
                </span>
                <div class="btn-group">
                    <button class="btn btn-outline-success btn-sm rounded-pill me-1" onclick="completeTodo(@todo.Id)" title="Tamamla">
                        <i class="bi bi-check2-circle"></i>
                    </button>
                    <button class="btn btn-outline-danger btn-sm rounded-pill" onclick="deleteTodo(@todo.Id)" title="Sil">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </div>
        }
        @if (!(Model?.Any() ?? false))
        {
            <div class="text-center py-5 text-muted">
                <i class="bi bi-clipboard2 fs-1"></i>
                <p class="mt-2">Henüz görev eklenmemiş</p>
            </div>
        }
    </div>
</div>

<style>
    .list-group-item {
        transition: all 0.2s ease-in-out;
    }
    .list-group-item:hover {
        transform: translateX(5px);
        background-color: #f8f9fa;
    }
    .btn-group .btn {
        padding: 0.25rem 0.5rem;
    }
    .btn-group .btn i {
        font-size: 1rem;
    }
</style>

@section Scripts {
    <script>
        function showAddTodoModal() {
            Swal.fire({
                title: 'Yeni Görev',
                input: 'text',
                inputLabel: 'Görev başlığı',
                inputPlaceholder: 'Görev başlığını giriniz',
                showCancelButton: true,
                confirmButtonText: 'Ekle',
                cancelButtonText: 'İptal',
                inputValidator: (value) => {
                    if (!value) {
                        return 'Görev başlığı boş olamaz!'
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    addTodo(result.value);
                }
            });
        }

        function addTodo(title) {
            fetch('/Home/AddTodo', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    title: title,
                    description: ''
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert(data.message || 'Görev eklenemedi');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Bir hata oluştu');
            });
        }

        function toggleTodo(id) {
            fetch('/Home/ToggleTodo', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(id)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                }
            });
        }

        function completeTodo(id) {
            Swal.fire({
                title: 'Emin misiniz?',
                text: "Görevi tamamlandı olarak işaretleyip silmek istiyor musunuz?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Evet, tamamlandı',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/Home/CompleteTodo', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(id)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire(
                                'Tamamlandı!',
                                'Görev başarıyla tamamlandı.',
                                'success'
                            ).then(() => location.reload());
                        }
                    });
                }
            });
        }

        function deleteTodo(id) {
            Swal.fire({
                title: 'Emin misiniz?',
                text: "Bu görevi silmek istediğinize emin misiniz?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Evet, sil!',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/Home/DeleteTodo', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(id)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire(
                                'Silindi!',
                                'Görev başarıyla silindi.',
                                'success'
                            ).then(() => location.reload());
                        }
                    });
                }
            });
        }
    </script>
}
